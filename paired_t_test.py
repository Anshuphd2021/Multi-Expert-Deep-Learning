# -*- coding: utf-8 -*-
"""Paired t test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15R01fjZn7RBKCv4XJUoelWqFteMeeNEF
"""

from scipy.stats import ttest_rel
import pandas as pd

# ----------------------------
# 1. Fold-wise Accuracy (%) values
# ----------------------------
proposed_acc = [94.29, 99.77 , 99.89, 99.77, 99.89]
resnet50_acc =     [77.52, 80.75, 79.51, 77.85, 80.12]
densenet169_acc =  [81.54, 84.78, 81.00, 81.00, 80.30]
mobilenetv2_acc = [71.74, 97.33, 82.60, 97.71, 83.87]
vgg16_acc =        [91.78, 91.43, 91.07, 90.19, 90.46]

# ----------------------------
# 2. Fold-wise Cohenâ€™s Kappa values
# ----------------------------
proposed_kappa = [0.9140, 0.9966, 0.9983, 0.9966, 0.9983]
resnet50_kappa =     [0.699, 0.742, 0.726, 0.705, 0.734]
densenet169_kappa =  [0.753, 0.796, 0.745, 0.746, 0.737]
mobilenetv2_kappa =  [0.689, 0.972, 0.826, 0.976, 0.839]
vgg16_kappa =        [0.890, 0.885, 0.880, 0.869, 0.872]

# ----------------------------
# 3. Create model dictionary
# ----------------------------
baseline_models = {

    "ResNet50": {"acc": resnet50_acc, "kappa": resnet50_kappa},
    "DenseNet169": {"acc": densenet169_acc, "kappa": densenet169_kappa},
    "MobileNetV2": {"acc": mobilenetv2_acc, "kappa": mobilenetv2_kappa},
    "VGG16": {"acc": vgg16_acc, "kappa": vgg16_kappa}
}

# ----------------------------
# 4. Run paired t-tests and store results
# ----------------------------
results = []

for model, data in baseline_models.items():
    # Accuracy comparison
    t_acc, p_acc = ttest_rel(proposed_acc, data["acc"])
    # Kappa comparison
    t_kappa, p_kappa = ttest_rel(proposed_kappa, data["kappa"])

    results.append({
        "Model": f"Proposed vs {model}",
        "Accuracy t-stat": round(t_acc, 4) if pd.notna(t_acc) else "NaN",
        "Accuracy p-value": round(p_acc, 6) if pd.notna(p_acc) else "NaN",
        "Accuracy Significant?": "Yes" if pd.notna(p_acc) and p_acc < 0.05 else "No",
        "Kappa t-stat": round(t_kappa, 4) if pd.notna(t_kappa) else "NaN",
        "Kappa p-value": round(p_kappa, 6) if pd.notna(p_kappa) else "NaN",
        "Kappa Significant?": "Yes" if pd.notna(p_kappa) and p_kappa < 0.05 else "No"
    })

# ----------------------------
# 5. Display Results
# ----------------------------
df = pd.DataFrame(results)
print(df)